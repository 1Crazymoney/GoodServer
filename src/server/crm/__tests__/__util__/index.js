import { capitalize } from 'lodash'

export default mock => {
  const contactUrl = id => `contacts/by_id/${encodeURIComponent(id)}`
  const contactByEmailUrl = email => `contacts/by_email/${encodeURIComponent(email)}`
  const emailWithId = (id, email) => ({ [email]: id })

  const mockSuccessResponse = (url, payload, method = 'GET', metadata = {}, once = false) =>
    mock[`on${capitalize(method)}`](url)[`reply${once ? 'Once' : ''}`](200, {
      payload,
      metadata: {
        error: false,
        ...metadata
      }
    })

  const mockFailedResponse = (url, method = 'GET') => mock[`on${capitalize(method)}`](url).reply(500)

  const _mockSuccessGetContact = (id, contactData, once = false) =>
    mockSuccessResponse(contactUrl(id), { ...contactData, id }, 'GET', {}, once)

  const mockGetContactTimeoutOnce = id => mock.onGet(contactUrl(id)).timeoutOnce()
  const mockSuccessGetContact = (id, contactData) => _mockSuccessGetContact(id, contactData, false)
  const mockSuccessGetContactOnce = (id, contactData) => _mockSuccessGetContact(id, contactData, true)

  const mockSuccessGetByEmail = (id, email, contactData) =>
    mockSuccessResponse(contactByEmailUrl(email), { ...contactData, email, id })

  const mockFailedGetContact = id => mockFailedResponse(id)
  const mockFailedGetByEmail = email => mock.onGet(contactByEmailUrl(email)).reply(404, { payload: { code: 404 } })

  const mockSuccessChangeStatus = () => mockSuccessResponse('v2/contacts/change_status', {}, 'POST')
  const mockSuccessDeleteContact = () => mockSuccessResponse('contacts/delete', {}, 'POST')

  const mockSuccessCreateContact = (email, autoGeneratedId) =>
    mockSuccessResponse(
      'v2/contacts',
      {
        created_emails: emailWithId(autoGeneratedId, email)
      },
      'POST'
    )

  const mockSuccessUpdateContact = (email, id) =>
    mockSuccessResponse(
      'v2/contacts',
      {
        updated_emails: emailWithId(id, email)
      },
      'PUT'
    )

  const mockSuccessUpdateEmail = (email, id) =>
    mockSuccessResponse(
      'contacts/change_email',
      {
        success_emails: emailWithId(id, email)
      },
      'PUT'
    )

  return {
    contactUrl,
    contactByEmailUrl,

    mockGetContactTimeoutOnce,
    mockSuccessGetContact,
    mockSuccessGetContactOnce,
    mockSuccessGetByEmail,
    mockFailedGetContact,
    mockFailedGetByEmail,

    mockSuccessChangeStatus,
    mockSuccessDeleteContact,

    mockSuccessCreateContact,
    mockSuccessUpdateContact,

    mockSuccessUpdateEmail
  }
}
